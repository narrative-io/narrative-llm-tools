on:
    release:
      types:
        - published

name: pypi-release

jobs:
    pypi-release:
      name: upload release to PyPI
      runs-on: ubuntu-latest
      permissions:
        id-token: write
      steps:
        - uses: actions/checkout@v4
          with:
            fetch-depth: 0
            token: ${{ secrets.GITHUB_TOKEN }}

        - name: Set up Python
          uses: actions/setup-python@v5
          with:
            python-version: '3.10'

        - name: Install uv
          run: |
            curl -LsSf https://astral.sh/uv/install.sh | sh
            echo "$HOME/.local/bin" >> $GITHUB_PATH

        - name: Install build dependencies
          run: uv pip install build wheel

        - name: Build package
          run: |
            python -m build --sdist --wheel
            ls -l dist/

        - name: mint API token
          id: mint-token
          run: |
            # retrieve the ambient OIDC token
            resp=$(curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=pypi")
            oidc_token=$(jq -r '.value' <<< "${resp}")

            # exchange the OIDC token for an API token
            resp=$(curl -X POST https://pypi.org/_/oidc/mint-token -d "{\"token\": \"${oidc_token}\"}")
            api_token=$(jq -r '.value' <<< "${resp}")

            # mask the newly minted API token, so that we don't accidentally leak it
            echo "::add-mask::${api_token}"

            # see the next step in the workflow for an example of using this step output
            echo "api-token=${api_token}" >> "${GITHUB_OUTPUT}"

        - name: publish
          uses: pypa/gh-action-pypi-publish@release/v1
          with:
            password: ${{ steps.mint-token.outputs.api-token }}

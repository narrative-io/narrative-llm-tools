name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.1.1)'
        required: true
        type: string

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Generate Release Notes
        id: generate_notes
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          echo "## What's Changed" > release_notes.md

          # Features
          echo "### 🚀 Features" >> release_notes.md
          if [ -z "$LAST_TAG" ]; then
            git log --pretty=format:"* %s (%h)" --no-merges | grep -i "^feat:" >> release_notes.md || true
          else
            git log ${LAST_TAG}..HEAD --pretty=format:"* %s (%h)" --no-merges | grep -i "^feat:" >> release_notes.md || true
          fi

          # Bug Fixes
          echo -e "\n### 🐛 Bug Fixes" >> release_notes.md
          if [ -z "$LAST_TAG" ]; then
            git log --pretty=format:"* %s (%h)" --no-merges | grep -i "^fix:" >> release_notes.md || true
          else
            git log ${LAST_TAG}..HEAD --pretty=format:"* %s (%h)" --no-merges | grep -i "^fix:" >> release_notes.md || true
          fi

          # Other Changes
          echo -e "\n### 🔧 Other Changes" >> release_notes.md
          if [ -z "$LAST_TAG" ]; then
            git log --pretty=format:"* %s (%h)" --no-merges | grep -iv "^feat:\|^fix:" >> release_notes.md || true
          else
            git log ${LAST_TAG}..HEAD --pretty=format:"* %s (%h)" --no-merges | grep -iv "^feat:\|^fix:" >> release_notes.md || true
          fi

          # Escape content for GitHub Actions
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "RELEASE_NOTES<<$EOF" >> $GITHUB_ENV
          cat release_notes.md >> $GITHUB_ENV
          echo "$EOF" >> $GITHUB_ENV

      - name: Update version in pyproject.toml
        run: |
          sed -i "/^\[project\]/ {n; s/^version = \".*\"/version = \"${{ github.event.inputs.version }}\"/}" pyproject.toml

      - name: Update README version
        run: |
          sed -i "s|narrative-llm-tools @ git+https://github.com/narrative-io/narrative-llm-tools.git@v[0-9]\+\.[0-9]\+\.[0-9]\+|narrative-llm-tools @ git+https://github.com/narrative-io/narrative-llm-tools.git@v${{ github.event.inputs.version }}|" README.md

      - name: Create version bump branch
        run: |
          BRANCH_NAME="release-${{ github.event.inputs.version }}"
          git checkout -b $BRANCH_NAME
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pyproject.toml README.md
          git commit -m "Bump version to ${{ github.event.inputs.version }}"
          git push origin $BRANCH_NAME

      - name: Create pull request
        uses: peter-evans/create-pull-request@v7
        with:
          branch: "release-${{ github.event.inputs.version }}"
          title: "Release v${{ github.event.inputs.version }}"
          body: "This pull request bumps the version to v${{ github.event.inputs.version }} and updates the necessary files."
          base: main
          labels: release
